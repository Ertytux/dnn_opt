/*
Copyright (c) 2018, Jairo Rojas-Delgado <jrdelgado@uci.cu>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
* Neither the name of the <organization> nor the
names of its contributors may be used to endorse or promote products
derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef DNN_OPT_CORE_GENERATOR
#define DNN_OPT_CORE_GENERATOR

namespace dnn_opt
{
namespace core
{

/**
 * @brief The generator class is intended as an interface for
 * custom generators. A generator generates
 * random numbers to be used as parameters to optimize.
 *
 * @author Jairo Rojas-Delgado <jrdelgado@uci.cu>
 * @version 1.0
 * @date June, 2016
 */
class generator
{
public:

  /**
   * @brief Generate a sequence of random numbers.
   *
   * @param count the amount of random numbers to generate.
   *
   * @param[out] parameters an array of size @count where to store the
   * generated random numbers.
   */
  virtual void generate(int count, float* params) = 0;

  /**
   * @brief Generate a single random number.
   *
   * @return the generated random number.
   */
  virtual float generate() = 0;

  /**
   * @brief The minimun value that this generator produces.
   *
   * @return the minimun value.
   */
  float get_min();

  /**
   * @brief The maximun value that this generator produces.
   *
   * @return the maximun value.
   */
  float get_max();

  /**
   * @brief Change the value of the minimun number generated by this generator.
   *
   * @param min the new minimun value.
   */
  void set_min(float min);

  /**
   * @brief Change the value of the maximun number generated by this generator.
   *
   * @param min the new maximun value.
   */
  void set_max(float max);

  /**
   * The basic destructor of this class.
   */
  virtual ~generator();

protected:

  /**
   * @brief The basic constructor for this class.
   *
   * @param min the minimun value this generator produces.
   *
   * @param max the maximun value this generator produces.
   */
  generator(float min, float max);

  /** The minimun value this generator produces */
  float _min;

  /** The maximun value this generator produces */
  float _max;

};

} // namespace core
} // namespace dnn_opt

#endif
